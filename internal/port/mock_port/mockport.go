// Code generated by MockGen. DO NOT EDIT.
// Source: port.go
//
// Generated by this command:
//
//      mockgen -source=port.go
//

// Package mock_port is a generated GoMock package.
package mock_port

import (
	context "context"
	reflect "reflect"

	model "github.com/ramk42/mini-url/internal/model"
	gomock "go.uber.org/mock/gomock"
)

// MockURLShortener is a mock of URLShortener interface.
type MockURLShortener struct {
	ctrl     *gomock.Controller
	recorder *MockURLShortenerMockRecorder
	isgomock struct{}
}

// MockURLShortenerMockRecorder is the mock recorder for MockURLShortener.
type MockURLShortenerMockRecorder struct {
	mock *MockURLShortener
}

// NewMockURLShortener creates a new mock instance.
func NewMockURLShortener(ctrl *gomock.Controller) *MockURLShortener {
	mock := &MockURLShortener{ctrl: ctrl}
	mock.recorder = &MockURLShortenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLShortener) EXPECT() *MockURLShortenerMockRecorder {
	return m.recorder
}

// Resolve mocks base method.
func (m *MockURLShortener) Resolve(ctx context.Context, slug string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Resolve", ctx, slug)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Resolve indicates an expected call of Resolve.
func (mr *MockURLShortenerMockRecorder) Resolve(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Resolve", reflect.TypeOf((*MockURLShortener)(nil).Resolve), ctx, slug)
}

// ShortenURL mocks base method.
func (m *MockURLShortener) ShortenURL(ctx context.Context, url model.URL, expirationInDays int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ShortenURL", ctx, url, expirationInDays)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ShortenURL indicates an expected call of ShortenURL.
func (mr *MockURLShortenerMockRecorder) ShortenURL(ctx, url, expirationInDays any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ShortenURL", reflect.TypeOf((*MockURLShortener)(nil).ShortenURL), ctx, url, expirationInDays)
}

// MockURLRepository is a mock of URLRepository interface.
type MockURLRepository struct {
	ctrl     *gomock.Controller
	recorder *MockURLRepositoryMockRecorder
	isgomock struct{}
}

// MockURLRepositoryMockRecorder is the mock recorder for MockURLRepository.
type MockURLRepositoryMockRecorder struct {
	mock *MockURLRepository
}

// NewMockURLRepository creates a new mock instance.
func NewMockURLRepository(ctrl *gomock.Controller) *MockURLRepository {
	mock := &MockURLRepository{ctrl: ctrl}
	mock.recorder = &MockURLRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockURLRepository) EXPECT() *MockURLRepositoryMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockURLRepository) Get(ctx context.Context, slug string) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, slug)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockURLRepositoryMockRecorder) Get(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockURLRepository)(nil).Get), ctx, slug)
}

// Save mocks base method.
func (m *MockURLRepository) Save(ctx context.Context, url model.URL) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", ctx, url)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockURLRepositoryMockRecorder) Save(ctx, url any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockURLRepository)(nil).Save), ctx, url)
}

// UpdateClicks mocks base method.
func (m *MockURLRepository) UpdateClicks(ctx context.Context, slug string) (model.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateClicks", ctx, slug)
	ret0, _ := ret[0].(model.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateClicks indicates an expected call of UpdateClicks.
func (mr *MockURLRepositoryMockRecorder) UpdateClicks(ctx, slug any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateClicks", reflect.TypeOf((*MockURLRepository)(nil).UpdateClicks), ctx, slug)
}
